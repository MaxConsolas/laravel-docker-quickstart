x-logs: &default-log
  driver: "json-file"
  options:
    max-size: "10k"
    max-file: "10"

services:
  back:
    image: ${REGISTRY}/back:${BACK_TAG}
    restart: always
    env_file: .env.backend
    environment:
      TZ: Europe/Moscow
      # Dynamic URLs based on environment
      BACK_URL: https://${BACK_DOMAIN}
      APP_URL: https://${FRONT_DOMAIN}
      IMGPROXY_URL: https://${IMGPROXY_DOMAIN}
      S3_ENDPOINT: https://${S3_DOMAIN}
    logging: *default-log
    networks:
      - app
      - db

  nginx:
    image: ${REGISTRY}/nginx:${NGINX_TAG}
    restart: always
    environment:
      # Internal service hosts
      IMGPROXY_HOST: http://imgproxy:8080/
      BACK_HOST: back:9000
      # External URLs for CORS and redirects
      FRONTEND_URL: https://${FRONT_DOMAIN}
      ADMIN_URL: https://${ADMIN_DOMAIN}
      IMGPROXY_URL: https://${IMGPROXY_DOMAIN}
    logging: *default-log
    networks:
      - app
      - proxy
    depends_on:
      - back
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.rule=Host(`${BACK_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.tls.certresolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-nginx.loadbalancer.server.port=80"
      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-nginx-body-max.buffering.maxRequestBodyBytes=209715200"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-nginx.middlewares=${COMPOSE_PROJECT_NAME}-nginx-body-max"

  admin:
    image: ${REGISTRY}/admin:${ADMIN_TAG}
    restart: always
    #ports:
    #  - "3001:3000"
    logging: *default-log
    networks:
      - app
      - proxy
    depends_on:
      - nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-admin.rule=Host(`${ADMIN_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-admin.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-admin.tls.certresolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-admin.loadbalancer.server.port=80"

  front:
    image: ${REGISTRY}/front:${FRONT_TAG}
    restart: always
    logging: *default-log
    networks:
      - app
      - proxy
    depends_on:
      - nginx
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-front.rule=Host(`${FRONT_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-front.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-front.tls.certresolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-front.loadbalancer.server.port=3000"

  db:
    image: postgres:16.2-alpine
    restart: always
    env_file: .env.postgres
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 2s
      timeout: 5s
    logging: *default-log
    networks:
      - db

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - ./data/redis:/data
    logging: *default-log
    networks:
      - app

  imgproxy:
    image: darthsim/imgproxy:v3.1
    restart: always
    env_file: .env.imgproxy
    logging: *default-log
    networks:
      - app
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-imgproxy.rule=Host(`${IMGPROXY_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-imgproxy.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-imgproxy.tls.certresolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-imgproxy.loadbalancer.server.port=8080"

      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-imgproxy.middlewares=${COMPOSE_PROJECT_NAME}-cors-headers"
      # CORS middleware
      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-cors-headers.headers.accesscontrolallowmethods=POST,GET,OPTIONS"
      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-cors-headers.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-cors-headers.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-cors-headers.headers.accesscontrolmaxage=100"
      - "traefik.http.middlewares.${COMPOSE_PROJECT_NAME}-cors-headers.headers.addvaryheader=true"

  minio:
    image: minio/minio:RELEASE.2024-10-02T17-50-41Z-cpuv1
    restart: always
    env_file: .env.minio
    volumes:
      - ./data/minio/data:/data
      - ./data/minio/config:/root/.minio
    command: server /data --console-address ":9090"
    logging: *default-log
    networks:
      app:
        aliases:
          - minio-local
      proxy:
        aliases:
          - minio-${COMPOSE_PROJECT_NAME}
    labels:
      - "traefik.enable=true"
      # S3 API
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-s3.rule=Host(`${S3_DOMAIN}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-s3.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-s3.tls.certresolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-s3.loadbalancer.server.port=9000"
      # S3 Console (online, if S3_CONSOLE_DOMAIN is set)
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-s3console.rule=Host(`${S3_CONSOLE_DOMAIN:-disabled.localhost}`)"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-s3console.entrypoints=websecure"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-s3console.tls.certresolver=letsencrypt"
      - "traefik.http.services.${COMPOSE_PROJECT_NAME}-s3console.loadbalancer.server.port=9090"
      - "traefik.http.routers.${COMPOSE_PROJECT_NAME}-s3console.service=${COMPOSE_PROJECT_NAME}-s3console"

  horizon:
    image: ${REGISTRY}/back:${BACK_TAG}
    restart: always
    command: ["php", "artisan", "horizon"]
    env_file: .env.backend
    environment:
      TZ: Europe/Moscow
      OPCACHE_VALIDATE_TIMESTAMPS: "0"
      APP_URL: https://${BACK_DOMAIN}
      FRONTEND_URL: https://${FRONT_DOMAIN}
      IMGPROXY_URL: https://${IMGPROXY_DOMAIN}
      S3_URL: https://${S3_DOMAIN}
    logging: *default-log
    networks:
      - app
      - db
    depends_on:
      - db
      - redis

networks:
  app:
    driver: bridge
  db:
    driver: bridge
  proxy:
    external: true